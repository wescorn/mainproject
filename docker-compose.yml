version: "3.8"
services:
  versiontwo:
    build:
      args:
        user: admin
        uid: 1000
      context: ./version-two
      dockerfile: Dockerfile
    image: versiontwo:local
    ports:
      - 9000:9000
    depends_on:
      - zipkin
    container_name: versiontwo-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./version-two/:/var/www
    networks:
      - mainnetwork
  orders:
    image: orders:local
    deploy:
      replicas: 3
    build:
      context: ./Orders
      dockerfile: Orders/Dockerfile
    env_file:
      - ./.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - rabbitmq
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
      - ../pdfs:/orders/pdfs
    restart: unless-stopped
    networks:
      - mainnetwork
  products:
    image: products:local
    build:
      context: ./products
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - mainnetwork
  shipments:
    image: shipments:local
    build:
      context: ./shipments
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - mainnetwork
  apigateway:
    image: apigateway:local
    deploy:
      replicas: 1
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    restart: unless-stopped
  #redis is needed for prometheus to work. It's some kind of storage thing.f
  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis-data:/data
    networks:
      - mainnetwork
  mysqldb:
    image: mysql:8.0
    container_name: mysqldb
    restart: unless-stopped
    env_file:
      - ./version-two/.env
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: mysqldb
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_PASSWORD: admin
      MYSQL_USER: admin
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - ./mysql:/docker-entrypoint-initdb.d
      - ../versiontwo_mysql_data:/var/lib/mysql
    networks:
      - mainnetwork
  versiontwo-nginx:
    image: nginx
    container_name: versiontwo-nginx
    restart: unless-stopped
    ports:
      - 8000:80
    volumes:
      - ./version-two/:/var/www
      - ./nginx/versiontwo/logs/:/var/log/nginx/
      - ./nginx/versiontwo/conf.d/:/etc/nginx/conf.d/
    networks:
      - mainnetwork
    depends_on:
      - versiontwo
  rabbitmq:
    image: rabbitmq:3-management
    ports:
    - "15673:15672"
    networks:
      - mainnetwork
  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    environment:
      - "STORAGE_TYPE=cassandra3"
      - "CASSANDRA_CONTACT_POINTS=cassandra:9042"
      - "CASSANDRA_KEYSPACE=zipkin"
      - "CASSANDRA_LOCAL_DC=datacenter1"
    depends_on:
      - cassandra
    networks:
      - mainnetwork
  # cassandra is what zipkin uses as storage.
  cassandra:
    image: cassandra:3
    ports:
      - "9042:9042"
    volumes:
      - ../cassandra_data:/var/lib/cassandra/data
    environment:
      - "MAX_HEAP_SIZE=512M"
      - "HEAP_NEWSIZE=100M"
    networks:
      - mainnetwork
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    user: root
    ports:
      - 9090:9090
    volumes:
      - ../prometheus:/prometheus
      - ./prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - mainnetwork
  seq:
    image: datalust/seq:latest
    ports:
      - "5341:80"
    environment:
      - ACCEPT_EULA=Y
    volumes:
      - ../seq_data:/data
    networks:
      - mainnetwork
  seq-input-gelf:
    image: datalust/seq-input-gelf:latest
    depends_on:
      - seq
    ports:
      - "12201:12201/udp"
    environment:
      SEQ_ADDRESS: "http://seq:5341"
    restart: unless-stopped
    networks:
      - mainnetwork
    #command: bash -c "sleep 5 && ./usr/share/jenkins/ref/init.groovy.d/create-jobs.sh"
  #GRAFANA is like a visualisation thing that can show graphs and shit based on some data source like Zipkin or Prometheus.    
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3100:3000
    depends_on:
      - prometheus
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    networks:
      - mainnetwork
  #Don't worry about this one, it just makes a Dashboard for Grafana, and then dies. It is not supposed to be running.
  #setup_grafana_datasource:
  #  image: appropriate/curl
  #  container_name: setup_grafana_datasource
  #  depends_on:
  #    - grafana
  #  volumes:
  #    - ./grafana/create-datasource-and-dashboard.sh:/create.sh:ro
  #  command: /create.sh
  #  networks:
  #    - mainnetwork
networks:
  mainnetwork:
    driver: bridge
volumes:
  mysql_data:
  redis-data:
  jenkins_home:
